<defun name="template">

	<in name="implementation" type="string" place="place_implementation"/>
	<in name="base_filename" type="string" place="place_base_filename"/>
	<in name="function_name" type="string" place="place_function_name"/>
	<in name="library_name" type="string" place="place_library_name"/>
	<in name="input" type="string" place="place_input"/>
	<out name="output" type="string" place="place_output"/>
	<net>
		<place name="place_input" type="string"/>
		<place name="place_output" type="string"/>
		<place name="place_base_filename" type="string"/>
		<place name="place_implementation" type="string"/>
		<place name="place_library_name" type="string"/>
		<place name="place_function_name" type="string"/>
	
		<transition name="compute">
      <defun>
        <require key="worker" mandatory="true"/>
        <in name="implementation" type="string"/>
        <in name="function_name" type="string"/>
        <in name="library_name" type="string"/>
				<in name="base_filename" type="string"/>
				<in name="input" type="string"/>
        <out name="output" type="string"/>
        <module name="singular_template"
              require_function_unloads_without_rest="false"
              function="compute(implementation,input,function_name,library_name,base_filename,output)">
          <cinclude href="share/include/template_interface.hpp" />
          <cinclude href="util-generic/dynamic_linking.hpp"/>
          <code><![CDATA[
				        std::string out;
								output = fhg::util::scoped_dlhandle
			 (implementation, RTLD_GLOBAL | RTLD_NOW | RTLD_DEEPBIND)
			 .sym<decltype (singular_template_compute)> ("singular_template_compute")
            ( 
						   input, function_name, library_name, base_filename
            );
            ]]></code>
        </module>
      </defun>
      <connect-read port="implementation" place="place_implementation"/>
      <connect-read port="function_name" place="place_function_name"/>
      <connect-read port="library_name" place="place_library_name"/>
			<connect-read port="base_filename" place="place_base_filename"/>
		  <connect-in port="input" place="place_input"/>
			<connect-out port="output" place="place_output"/>
  </transition>

	</net>
</defun>
